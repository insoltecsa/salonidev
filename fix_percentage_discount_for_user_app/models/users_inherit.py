# -*- coding: utf-8 -*-

from odoo import api, fields, models, _
from odoo.exceptions import UserError, ValidationError


class UsersInherit(models.Model):
	_inherit = 'res.users'

	fixed_limit = fields.Float(string="Fixed Limit")
	percent_limit = fields.Float(string="Percentage Limit")

class SaleOrderInherit(models.Model):
	_inherit = 'sale.order'

	limit_type = fields.Selection([
		('fix', 'Fixed Limit'),
		('percent', 'Percentage Limit'),
	], default='percent', help="Select the discount limit type.")

	def _prepare_invoice(self):
		invoice_vals = super(SaleOrderInherit, self)._prepare_invoice()
		if invoice_vals:
			if self.limit_type:
				invoice_vals.update({'limit_type': self.limit_type})
		return invoice_vals


class SaleOrderLineInherit(models.Model):
	_inherit = 'sale.order.line'

	@api.depends('discount')
	def _discount_amt_calc(self):
		for line in self:
			if line.order_id.limit_type == 'percent':
				dis_price = line.price_unit * (1 - (line.discount or 0.0) / 100.0)
				price = line.price_unit - dis_price
			elif line.order_id.limit_type == 'fix':
				price = line.discount or 0.0
			line.update({
				'discount_amt': price
			})

	discount_amt = fields.Monetary(compute='_discount_amt_calc', string='Discount', store=True)


	def _prepare_invoice_line(self, sequence):
		invoice_line_vals = super(SaleOrderLineInherit, self.with_context(discount_calc=True))._prepare_invoice_line(sequence=sequence)
		if invoice_line_vals:
			invoice_line_vals.update({'discount_amt': self.discount_amt,'limit_type': self.order_id.limit_type})
		return invoice_line_vals

	@api.depends('product_uom_qty', 'discount', 'price_unit', 'tax_id')
	def _compute_amount(self):

		"""
		Compute the amounts of the SO line.
		"""

		for line in self:
			if line.order_id.limit_type in ['percent','fix']:
				price = line.price_unit - line.discount_amt or 0.0
			else:
				price = line.price_unit * (1 - (line.discount or 0.0) / 100.0)
			taxes = line.tax_id.compute_all(price, line.order_id.currency_id, line.product_uom_qty, product=line.product_id, partner=line.order_id.partner_shipping_id)
			line.update({
				'price_tax': sum(t.get('amount', 0.0) for t in taxes.get('taxes', [])),
				'price_total': taxes['total_included'],
				'price_subtotal': taxes['total_excluded'],
			})
			if self.env.context.get('import_file', False) and not self.env.user.user_has_groups('account.group_account_manager'):
				line.tax_id.invalidate_cache(['invoice_repartition_line_ids'], [line.tax_id.id])


	@api.onchange('discount')
	def calculate_discount(self):
		if self.order_id.limit_type == 'fix':
			if self.env.user.fixed_limit != 0.0 and self.env.user.fixed_limit < self.discount:
				msg = _('Discount amount must be less than or equal to %s!') % (self.env.user.fixed_limit, )
				raise ValidationError(msg)
		if self.order_id.limit_type == 'percent':
			if self.env.user.percent_limit != 0.0 and self.env.user.percent_limit < self.discount:
				msg = _('Discount percent must be less than or equal to %s!') % (self.env.user.percent_limit, )
				raise ValidationError(msg)


class AccountMove(models.Model):
	_inherit = "account.move"

	limit_type = fields.Selection([
		('fix', 'Fixed Limit'),
		('percent', 'Percentage Limit'),
	], default='percent', help="Select the discount limit type.")


	def _recompute_tax_lines(self, recompute_tax_base_amount=False):
		''' Compute the dynamic tax lines of the journal entry.

		:param lines_map: The line_ids dispatched by type containing:
			* base_lines: The lines having a tax_ids set.
			* tax_lines: The lines having a tax_line_id set.
			* terms_lines: The lines generated by the payment terms of the invoice.
			* rounding_lines: The cash rounding lines of the invoice.
		'''
		self.ensure_one()
		in_draft_mode = self != self._origin

		def _serialize_tax_grouping_key(grouping_dict):
			''' Serialize the dictionary values to be used in the taxes_map.
			:param grouping_dict: The values returned by '_get_tax_grouping_key_from_tax_line' or '_get_tax_grouping_key_from_base_line'.
			:return: A string representing the values.
			'''
			return '-'.join(str(v) for v in grouping_dict.values())

		def _compute_base_line_taxes(base_line):
			''' Compute taxes amounts both in company currency / foreign currency as the ratio between
			amount_currency & balance could not be the same as the expected currency rate.
			The 'amount_currency' value will be set on compute_all(...)['taxes'] in multi-currency.
			:param base_line:   The account.move.line owning the taxes.
			:return:            The result of the compute_all method.
			'''
			move = base_line.move_id

			if move.is_invoice(include_receipts=True):
				handle_price_include = True
				sign = -1 if move.is_inbound() else 1
				quantity = base_line.quantity
				is_refund = move.move_type in ('out_refund', 'in_refund')

				price_unit_wo_discount = sign * base_line.price_unit * (1 - (base_line.discount / 100.0))
				if move.limit_type == 'fix':
					price_unit_wo_discount = sign * (base_line.price_unit - base_line.discount)
				else:
					price_unit_wo_discount = sign * base_line.price_unit * (1 - (base_line.discount / 100.0))
			else:
				handle_price_include = False
				quantity = 1.0
				tax_type = base_line.tax_ids[0].type_tax_use if base_line.tax_ids else None
				is_refund = (tax_type == 'sale' and base_line.debit) or (tax_type == 'purchase' and base_line.credit)
				price_unit_wo_discount = base_line.amount_currency

			balance_taxes_res = base_line.tax_ids._origin.with_context(force_sign=move._get_tax_force_sign()).compute_all(
				price_unit_wo_discount,
				currency=base_line.currency_id,
				quantity=quantity,
				product=base_line.product_id,
				partner=base_line.partner_id,
				is_refund=is_refund,
				handle_price_include=handle_price_include,
			)
			if move.move_type == 'entry':
				repartition_field = is_refund and 'refund_repartition_line_ids' or 'invoice_repartition_line_ids'
				repartition_tags = base_line.tax_ids.flatten_taxes_hierarchy().mapped(repartition_field).filtered(lambda x: x.repartition_type == 'base').tag_ids
				tags_need_inversion = (tax_type == 'sale' and not is_refund) or (tax_type == 'purchase' and is_refund)
				if tags_need_inversion:
					balance_taxes_res['base_tags'] = base_line._revert_signed_tags(repartition_tags).ids
					for tax_res in balance_taxes_res['taxes']:
						tax_res['tag_ids'] = base_line._revert_signed_tags(self.env['account.account.tag'].browse(tax_res['tag_ids'])).ids

			return balance_taxes_res

		taxes_map = {}

		# ==== Add tax lines ====
		to_remove = self.env['account.move.line']
		for line in self.line_ids.filtered('tax_repartition_line_id'):
			grouping_dict = self._get_tax_grouping_key_from_tax_line(line)
			grouping_key = _serialize_tax_grouping_key(grouping_dict)
			if grouping_key in taxes_map:
				# A line with the same key does already exist, we only need one
				# to modify it; we have to drop this one.
				to_remove += line
			else:
				taxes_map[grouping_key] = {
					'tax_line': line,
					'amount': 0.0,
					'tax_base_amount': 0.0,
					'grouping_dict': False,
				}
		if not recompute_tax_base_amount:
			self.line_ids -= to_remove

		# ==== Mount base lines ====
		for line in self.line_ids.filtered(lambda line: not line.tax_repartition_line_id):
			# Don't call compute_all if there is no tax.
			if not line.tax_ids:
				if not recompute_tax_base_amount:
					line.tax_tag_ids = [(5, 0, 0)]
				continue

			compute_all_vals = _compute_base_line_taxes(line)

			# Assign tags on base line
			if not recompute_tax_base_amount:
				line.tax_tag_ids = compute_all_vals['base_tags'] or [(5, 0, 0)]

			tax_exigible = True
			for tax_vals in compute_all_vals['taxes']:
				grouping_dict = self._get_tax_grouping_key_from_base_line(line, tax_vals)
				grouping_key = _serialize_tax_grouping_key(grouping_dict)

				tax_repartition_line = self.env['account.tax.repartition.line'].browse(tax_vals['tax_repartition_line_id'])
				tax = tax_repartition_line.invoice_tax_id or tax_repartition_line.refund_tax_id

				if tax.tax_exigibility == 'on_payment':
					tax_exigible = False

				taxes_map_entry = taxes_map.setdefault(grouping_key, {
					'tax_line': None,
					'amount': 0.0,
					'tax_base_amount': 0.0,
					'grouping_dict': False,
				})
				taxes_map_entry['amount'] += tax_vals['amount']
				taxes_map_entry['tax_base_amount'] += self._get_base_amount_to_display(tax_vals['base'], tax_repartition_line, tax_vals['group'])
				taxes_map_entry['grouping_dict'] = grouping_dict
			if not recompute_tax_base_amount:
				line.tax_exigible = tax_exigible

		# ==== Process taxes_map ====
		for taxes_map_entry in taxes_map.values():
			# The tax line is no longer used in any base lines, drop it.
			if taxes_map_entry['tax_line'] and not taxes_map_entry['grouping_dict']:
				if not recompute_tax_base_amount:
					self.line_ids -= taxes_map_entry['tax_line']
				continue

			currency = self.env['res.currency'].browse(taxes_map_entry['grouping_dict']['currency_id'])

			# Don't create tax lines with zero balance.
			if currency.is_zero(taxes_map_entry['amount']):
				if taxes_map_entry['tax_line'] and not recompute_tax_base_amount:
					self.line_ids -= taxes_map_entry['tax_line']
				continue

			# tax_base_amount field is expressed using the company currency.
			tax_base_amount = currency._convert(taxes_map_entry['tax_base_amount'], self.company_currency_id, self.company_id, self.date or fields.Date.context_today(self))

			# Recompute only the tax_base_amount.
			if recompute_tax_base_amount:
				if taxes_map_entry['tax_line']:
					taxes_map_entry['tax_line'].tax_base_amount = tax_base_amount
				continue

			balance = currency._convert(
				taxes_map_entry['amount'],
				self.company_currency_id,
				self.company_id,
				self.date or fields.Date.context_today(self),
			)
			to_write_on_line = {
				'amount_currency': taxes_map_entry['amount'],
				'currency_id': taxes_map_entry['grouping_dict']['currency_id'],
				'debit': balance > 0.0 and balance or 0.0,
				'credit': balance < 0.0 and -balance or 0.0,
				'tax_base_amount': tax_base_amount,
			}

			if taxes_map_entry['tax_line']:
				# Update an existing tax line.
				taxes_map_entry['tax_line'].update(to_write_on_line)
			else:
				create_method = in_draft_mode and self.env['account.move.line'].new or self.env['account.move.line'].create
				tax_repartition_line_id = taxes_map_entry['grouping_dict']['tax_repartition_line_id']
				tax_repartition_line = self.env['account.tax.repartition.line'].browse(tax_repartition_line_id)
				tax = tax_repartition_line.invoice_tax_id or tax_repartition_line.refund_tax_id
				taxes_map_entry['tax_line'] = create_method({
					**to_write_on_line,
					'name': tax.name,
					'move_id': self.id,
					'partner_id': line.partner_id.id,
					'company_id': line.company_id.id,
					'company_currency_id': line.company_currency_id.id,
					'tax_base_amount': tax_base_amount,
					'exclude_from_invoice_tab': True,
					'tax_exigible': tax.tax_exigibility == 'on_invoice',
					**taxes_map_entry['grouping_dict'],
				})

			if in_draft_mode:
				taxes_map_entry['tax_line'].update(taxes_map_entry['tax_line']._get_fields_onchange_balance(force_computation=True))

class AccountMoveLine(models.Model):
	_inherit = "account.move.line"
	_description = "Journal Item"

	@api.model_create_multi
	def create(self, vals_list):
		move_id = False
		for v in vals_list:
			move_id = self.env['account.move'].browse(v.get('move_id'))
		if move_id:
			lines = super(AccountMoveLine, self.with_context({'limit_type': move_id.limit_type})).create(vals_list)
		else:
			lines = super(AccountMoveLine, self).create(vals_list)
		return lines

	def write(self, vals):
		result = True
		for line in self:
			if line.mapped('move_id'):
				limit_type = line.mapped('move_id').limit_type
				result |=  super(AccountMoveLine, line.with_context({'limit_type': limit_type})).write(vals)
			else:
				result |= super(AccountMoveLine, line).write(vals)
		return result


	@api.depends('discount')
	def _discount_amt_calc(self):
		for line in self:
			if line.move_id.limit_type == 'percent':
				dis_price = line.price_unit * (1 - (line.discount or 0.0) / 100.0)
				price = line.price_unit - dis_price
			elif line.move_id.limit_type == 'fix':
				price = line.discount or 0.0
			line.update({
				'discount_amt': price
			})

	discount_amt = fields.Monetary(compute='_discount_amt_calc', string='Discount', store=True)
	limit_type = fields.Selection(related="move_id.limit_type", default='percent', help="Select the discount limit type." , store = True)


	@api.model
	def _get_price_total_and_subtotal_model(self, price_unit, quantity, discount, currency, product, partner, taxes, move_type):
		''' This method is used to compute 'price_total' & 'price_subtotal'.

		:param price_unit:  The current price unit.
		:param quantity:    The current quantity.
		:param discount:    The current discount.
		:param currency:    The line's currency.
		:param product:     The line's product.
		:param partner:     The line's partner.
		:param taxes:       The applied taxes.
		:param move_type:   The type of the move.
		:return:            A dictionary containing 'price_subtotal' & 'price_total'.
		'''
		res = {}

		# Compute 'price_subtotal'.
		line_discount_price_unit = price_unit * (1 - (discount / 100.0))
		# line_discount_price_unit = 750
		if self.move_id.limit_type in ['percent','fix']:
			line_discount_price_unit = price_unit - self.discount_amt or 0.0
		elif self._context.get('limit_type') in ['percent','fix']:
			if self._context.get('limit_type') == 'fix':
				line_discount_price_unit = price_unit - discount 
			else:
				line_discount_price_unit = price_unit * (1 - (discount / 100.0))
		subtotal = quantity * line_discount_price_unit
		# Compute 'price_total'.
		if taxes:
			force_sign = -1 if move_type in ('out_invoice', 'in_refund', 'out_receipt') else 1
			taxes_res = taxes._origin.with_context(force_sign=force_sign).compute_all(line_discount_price_unit,
				quantity=quantity, currency=currency, product=product, partner=partner, is_refund=move_type in ('out_refund', 'in_refund'))
			res['price_subtotal'] = taxes_res['total_excluded']
			res['price_total'] = taxes_res['total_included']
		else:
			res['price_total'] = res['price_subtotal'] = subtotal
		#In case of multi currency, round before it's use for computing debit credit
		if currency:
			res = {k: currency.round(v) for k, v in res.items()}
		return res


	@api.onchange('discount')
	def calculate_discount(self):
		if self.move_id.limit_type == 'fix':
			if self.env.user.fixed_limit != 0.0 and self.env.user.fixed_limit < self.discount:
				msg = _('Discount amount must be less than or equal to %s!') % (self.env.user.fixed_limit, )
				raise ValidationError(msg)
		if self.move_id.limit_type == 'percent':
			if self.env.user.percent_limit != 0.0 and self.env.user.percent_limit < self.discount:
				msg = _('Discount percent must be less than or equal to %s!') % (self.env.user.percent_limit, )
				raise ValidationError(msg)

